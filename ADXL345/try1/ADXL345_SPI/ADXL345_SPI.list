				;file C:\Users\IIIT\Desktop\ADXL345\try1\ADXL345_SPI\ADXL345_SPI.c
				;1	#include <HT66F70A.h>
				;2	
				;3	#define	DATA_BUS _pg
				;4	#define RS  _ph0
				;5	#define RW  _ph1
				;6	#define EN  _ph2
				;7	
				;8	#define SDO _pa5	//				;9	#define SDI _pa6	//				;10	#define SCK _pa7
				;11	#define CS  _pb5
				;12	
				;13	#define SDOC _pac5	//				;14	#define SDIC _pac6
				;15	#define SCKC _pac7
				;16	#define CSC  _pbc5
				;17	
				;18	#define SDOPU _papu5	//				;19	#define SDIPU _papu6
				;20	#define SCKPU _papu7
				;21	#define CSPU  _pbpu5
				;22	
				;23	#define PAS2 _pas2	//pas 5 SDO
				;24	#define PAS3 _pas3	//pas 6 7 SDI SCL
				;25	#define PBS2 _pbs2	//pbs5 scs
				;26	
				;27	void Delay100us(short);	
				;28	void _SPI_CS(unsigned short);
				;29	void _SPI_SCL(unsigned short);
				;30	unsigned char ADXL345_SPI_Read(unsigned char);
				;31	void delay_ms(unsigned char);
				;32	void ADXL345_SPI_Write(unsigned char , unsigned char);
				;33	void LCD_Cmd(unsigned char data);
				;34	void LCD_Senddata(unsigned char data);
				;35	void LCD_Reset(void);
				;36	void PinSet(void);
				;37	void DataFormat(void);
				;38	void PrintLCD(unsigned char);
				;39	unsigned char DATAX0 = 0x32;
				;40	unsigned char DATAX1 = 0x33;
				;41	unsigned char DATAY0 = 0x34;
				;42	unsigned char DATAY1 = 0x35;
				;43	unsigned char DATAZ0 = 0x36;
				;44	unsigned char DATAZ1 = 0x37;
				;45	char i;
				;46	double x[10];
				;47	double y[10];
				;48	double z[10];
				;49	int RawDataX[2],RawDataY[2],RawDataZ[2];
				;50	int* ptrRawData[] =
0200	0000	nop
0201	0000	nop
0202	0000	nop
0203	0000	nop
0204	0000	nop
0205	0000	nop
				;51	{&RawDataX[0],&RawDataX[1],&RawDataY[0],&RawDataY[1],&RawDataZ[0],&RawDataZ[1]};
				;52	int AccX,AccY,AccZ;
				;53	int* ptrAcc[] = {&AccX,&AccY,&AccZ};
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
01FD	3233	set     INT2F
01FE	0000	nop
01FF	0000	nop
				;54	char deviceID;
				;55	
				;56	void main()
				;57	{
				@code .SECTION 'CODE'
				include HT66F70A.inc
0000	1F0B	clr     BP
0001	2802	jmp     begin_startup_value
				startupend3:
				@start .SECTION 'CODE'
003C	0F00	mov     a, 0H
003D	008B	mov     BP, a
003E	29C2	jmp     _main
003F	0000	nop
0040	0000	nop
0041	0000	nop
0042	0000	nop
				L0043:
0043	0000	nop
				L0044:
0044	0000	nop
0045	1785	sdz     ACC
0046	2844	jmp     L0044
				L0047:
0047	0000	nop
0048	1785	sdz     ACC
0049	2847	jmp     L0047
004A	5783	sdz     bLevel
004B	2847	jmp     L0047
004C	0003	ret
				;58		PinSet();	//				_main:
				_main:
01C2	21A1	call    _PinSet
				;59		delay_ms(2);
01C3	0F02	mov     a, 2H
01C4	204D	call    _delay_ms
				;60		ADXL345_SPI_Write(0x31, 0x0B); //01C5	0F0B	mov     a, BH
01C6	4085	mov     data, a
01C7	0F31	mov     a, 31H
01C8	2151	call    _ADXL345_SPI_Write
				;61		ADXL345_SPI_Write(0x2D, 0x08); //01C9	0F08	mov     a, 8H
01CA	4085	mov     data, a
01CB	0F2D	mov     a, 2DH
01CC	2151	call    _ADXL345_SPI_Write
				;62		ADXL345_SPI_Write(0x2E, 0x80);
01CD	0F80	mov     a, 80H
01CE	4085	mov     data, a
01CF	0F2E	mov     a, 2EH
01D0	2151	call    _ADXL345_SPI_Write
				;63		ADXL345_SPI_Write(0x2c, 0x0F);
01D1	0F0F	mov     a, FH
01D2	4085	mov     data, a
01D3	0F2C	mov     a, 2CH
01D4	2151	call    _ADXL345_SPI_Write
				;64		
				;65		LCD_Reset();		//LCD01D5	2146	call    _LCD_Reset
				;66		delay_ms(250);		//01D6	0FFA	mov     a, FAH
01D7	204D	call    _delay_ms
				;67		LCD_Cmd(0xc0);  	//LCD01D8	0FC0	mov     a, C0H
01D9	213B	call    _LCD_Cmd
				;68		delay_ms(250);   
01DA	0FFA	mov     a, FAH
				_L29:
01DB	204D	call    _delay_ms
				;69		
				;70	
				;71		while(1)
				;72		{/*
				;73			delay_ms(250);
				;74			for(i=5;i>=0;i--)
				;75			{
				;76				*ptrRawData[i] = (int)ADXL345_SPI_Read(i+50);
				;77			}
				;78			for(i=0;i<3;i++)
				;79			{
				;80				*ptrAcc[i] = ((*ptrRawData[1+i*2]<<8)&0xFF00) | (*ptrRawData[0+i*2]&0xFF);
				;81				*ptrAcc[i] = *ptrAcc[i] * 4;
				;82			}*/
				;83			/*
				;84			Delay100us(100);
				;85			LCD_Cmd(0x80);  //				;86			delay_ms(150);
				;87		 	PrintLCD(*ptrAcc[0]);
				;88		  	delay_ms(50);
				;89		  	
				;90		  	Delay100us(100);
				;91		  	LCD_Cmd(0x86);	//				;92		 	delay_ms(150);
				;93		  	PrintLCD(*ptrAcc[1]);
				;94			delay_ms(50);
				;95			
				;96			Delay100us(100);
				;97			LCD_Cmd(0x8d);	//				;98		 	delay_ms(150);
				;99		  	PrintLCD(*ptrAcc[2]);
				;100			delay_ms(50);
				;101			*/
				;102			delay_ms(255);
01DC	0FFF	mov     a, FFH
01DD	204D	call    _delay_ms
				;103			deviceID = ADXL345_SPI_Read(0x00);
01DE	0F00	mov     a, 0H
01DF	20E3	call    _ADXL345_SPI_Read
01E0	4080	mov     ra, a
01E1	4700	mov     a, ra
01E2	40A1	mov     deviceID[0], a
				;104			Delay100us(100);
01E3	0F64	mov     a, 64H
01E4	4083	mov     bLevel, a
01E5	5F04	clr     del
01E6	20B9	call    _Delay100us
				;105			LCD_Cmd(0xc0);	//01E7	0FC0	mov     a, C0H
01E8	213B	call    _LCD_Cmd
				;106		 	delay_ms(255);
01E9	0FFF	mov     a, FFH
01EA	204D	call    _delay_ms
				;107		  	PrintLCD(deviceID);
01EB	4721	mov     a, deviceID[0]
01EC	2082	call    _PrintLCD
				;108			delay_ms(50);
01ED	0F32	mov     a, 32H
01EE	29DB	jmp     _L29
01EF	29EF	jmp     $
				startup_value:
				@ROMDATA_BASE .SECTION 'CODE'
01F0	0018	jmp     L0018
01F1	0089	mov     TBHP, a
01F2	00A6	mov     PF, a
01F3	00A4	mov     __pbc[13], a
01F4	00A2	mov     PE, a
01F5	00B0	mov     INTC0, a
01F6	00B2	mov     INTC2, a
01F7	00AC	mov     __pgc[1], a
01F8	00AE	mov     PH, a
01F9	00A8	mov     __pbc[17], a
01FA	00AA	mov     PG, a
01FB	3637	clr     LVF
01FC	3435	clr     T1PE
				;109		}
				;110	}
				;111	//////////////////////////////
				;112	///				;113	//////////////////////////////
				;114	void PinSet(void)
				;115	{
				;116		_wdtc = 0xa8;//				_PinSet:
				_PinSet:
01A1	0FA8	mov     a, A8H
01A2	00BE	mov     WDTC, a
				;117		_cp0c = 0x00;	//01A3	1F46	clr     CP0C
				;118		_cp1c = 0x00;
01A4	1F47	clr     CP1C
				;119		_scomen = 0;
01A5	367F	clr     SCOMEN
				;120		_smod = 0xe0;//4MHz
01A6	0FE0	mov     a, E0H
01A7	00BA	mov     SMOD, a
				;121		_sdis0=0;
01A8	B64C	lclr    SDIS0
				;122		_sdis1=0;
01AA	B6CC	lclr    SDIS1
				;123		_simen=1;  
01AC	30EC	set     SIMEN
				;124		_simc0=0x42;
01AD	0F42	mov     a, 42H
01AE	00EC	mov     SIMC0, a
				;125		_simc2=0x24;
01AF	0F24	mov     a, 24H
01B0	00EF	mov     SIMC2, a
				;126		
				;127		//PAS2=0x10;  //				;128		//PAS3=0x22;  
				;129		//PBS2=0x10;
				;130	
				;131		
				;132		_ifs4=0;
01B1	9F4C	lclr    IFS4
				;133		
				;134		_pac5=0; 	_pac6=1; 	_pac7=0;		CSC=0;//01B3	3693	clr     PAC5
01B4	3313	set     PAC6
01B5	3793	clr     PAC7
01B6	3697	clr     PBC5
				;135		_phc0 = 0; _phc1 = 0; _phc2 = 0; //01B7	342F	clr     PHC0
01B8	34AF	clr     PHC1
01B9	352F	clr     PHC2
				;136		SDIPU=1;	SDOPU=1;	SCKPU=1;	CSPU=1;		SCK=0;		CS=1;		_pgc = 0x00;   
01BA	3311	set     PAPU6
01BB	3291	set     PAPU5
01BC	3391	set     PAPU7
01BD	3295	set     PBPU5
01BE	3792	clr     PA7
01BF	3296	set     PB5
01C0	1F2B	clr     PGC
01C1	0003	ret
				;137	}
				;138	
				;139	
				;140	//////////////////////////////
				;141	///SPI				;142	//////////////////////////////
				;143	unsigned char ADXL345_SPI_Read(unsigned char Address)
				;144	{
				_ADXL345_SPI_Read:
				_ADXL345_SPI_Read:
00E3	4085	mov     Address[0], a
				;145	  unsigned char ReadData=0;
0117	5F08	clr     ReadData[0]
				;146	  unsigned char tempSDO;
				;147	  
				;148	  short i;
				;149	 
				;150	  _SPI_CS(0);
00E4	5F03	clr     bLevel
00E5	5F04	clr     del
00E6	20D7	call    __SPI_CS
				;151	  
				;152	  for(i = 7; i >= 0; i-- )
00E7	0F07	mov     a, 7H
00E8	4086	mov     Address, a
00E9	5F07	clr     Address[1]
0107	0FFF	mov     a, FFH
0108	4386	addm    a, Address
0109	0FFF	mov     a, FFH
010A	5387	adcm    a, Address[1]
010B	4706	mov     a, Address
010C	4607	and     a, Address[1]
010D	0B01	add     a, 1H
010E	380A	snz     C
010F	28EA	jmp     L00EA
				;153	  {
				;154	    // F-Edge
				;155	    _SPI_SCL(1);
				L00EA:
00EA	0F01	mov     a, 1H
00EB	4083	mov     bLevel, a
00EC	5F04	clr     del
00ED	20CD	call    __SPI_SCL
				;156	    SDO = 0x1 & ((0x80 | Address) >> i);
00EE	4705	mov     a, Address[0]
00EF	4081	mov     rb, a
00F0	7381	set     rb.7
00F1	5F02	clr     rc
00F2	5406	inca    Address
00F3	28F9	jmp     L00F9
				L00F4:
00F4	340A	clr     C
00F5	7F82	sz      rc.7
00F6	300A	set     C
00F7	5B82	rrc     rc
00F8	5B81	rrc     rb
				L00F9:
00F9	1785	sdz     ACC
00FA	28F4	jmp     L00F4
00FB	0F01	mov     a, 1H
00FC	4681	andm    a, rb
00FD	5101	swapa   rb
00FE	1885	rl      ACC
00FF	0EE0	and     a, E0H
0100	4081	mov     rb, a
0101	3692	clr     PA5
0102	4701	mov     a, rb
0103	0592	orm     a, PA
				;157	    _SPI_SCL(0);
0104	5F03	clr     bLevel
0105	5F04	clr     del
0106	20CD	call    __SPI_SCL
				;158	  }
				;159	 
				;160	  //===========================
				;161	  _SPI_SCL(1);
0110	0F01	mov     a, 1H
0111	4083	mov     bLevel, a
0112	5F04	clr     del
0113	20CD	call    __SPI_SCL
				;162	  //===========================
				;163	 
				;164	  for(i = 7; i >= 0; i-- )
0114	0F07	mov     a, 7H
0115	4086	mov     Address, a
0116	5F07	clr     Address[1]
012C	0FFF	mov     a, FFH
012D	4386	addm    a, Address
012E	0FFF	mov     a, FFH
012F	5387	adcm    a, Address[1]
0130	4706	mov     a, Address
0131	4607	and     a, Address[1]
0132	0B01	add     a, 1H
0133	380A	snz     C
0134	2918	jmp     L0118
				;165	  {
				;166	    // R-Edge
				;167	    _SPI_SCL(0);
				L0118:
0118	5F03	clr     bLevel
0119	5F04	clr     del
011A	20CD	call    __SPI_SCL
				;168	    _SPI_SCL(1);
011B	0F01	mov     a, 1H
011C	4083	mov     bLevel, a
011D	5F04	clr     del
011E	20CD	call    __SPI_SCL
				;169	    tempSDO = SDI; // Read bit
011F	5F01	clr     rb
0120	3F12	sz      PA6
0121	5481	inc     rb
				;170	 
				;171	    ReadData |= tempSDO << i;
0122	5F02	clr     rc
0123	5406	inca    Address
0124	2928	jmp     L0128
				L0125:
0125	340A	clr     C
0126	5A81	rlc     rb
0127	5A82	rlc     rc
				L0128:
0128	1785	sdz     ACC
0129	2925	jmp     L0125
012A	4701	mov     a, rb
012B	4588	orm     a, ReadData[0]
				;172	  }
				;173	 
				;174	  _SPI_CS(1);
0135	0F01	mov     a, 1H
0136	4083	mov     bLevel, a
0137	5F04	clr     del
0138	20D7	call    __SPI_CS
				;175	  return ReadData & 0xFF;
				;176	}
0139	4708	mov     a, ReadData[0]
013A	0003	ret
				;177	
				;178	//////////////////////////////
				;179	///LCD				;180	//////////////////////////////
				;181	void PrintLCD(unsigned char data)
				;182	{
				_PrintLCD:
				_PrintLCD:
0082	4080	mov     ra, a
0083	4088	mov     data[0], a
				;183		LCD_Senddata((data/100)%10+0x30); 
0084	5F06	clr     Address
0085	4700	mov     a, ra
0086	4083	mov     bLevel, a
0087	0F64	mov     a, 64H
0088	4084	mov     del, a
0089	2069	call    L0069
008A	4703	mov     a, bLevel
008B	4080	mov     ra, a
008C	5F06	clr     Address
008D	4700	mov     a, ra
008E	4083	mov     bLevel, a
008F	0F0A	mov     a, AH
0090	4084	mov     del, a
0091	2069	call    L0069
0092	4705	mov     a, data
0093	4080	mov     ra, a
0094	0F30	mov     a, 30H
0095	4380	addm    a, ra
0096	4700	mov     a, ra
0097	205E	call    _LCD_Senddata
				;184		LCD_Senddata((data/10)%10+0x30);
0098	5F06	clr     Address
0099	4708	mov     a, data[0]
009A	4083	mov     bLevel, a
009B	0F0A	mov     a, AH
009C	4084	mov     del, a
009D	2069	call    L0069
009E	4703	mov     a, bLevel
009F	4080	mov     ra, a
00A0	5F06	clr     Address
00A1	4700	mov     a, ra
00A2	4083	mov     bLevel, a
00A3	0F0A	mov     a, AH
00A4	4084	mov     del, a
00A5	2069	call    L0069
00A6	4705	mov     a, data
00A7	4080	mov     ra, a
00A8	0F30	mov     a, 30H
00A9	4380	addm    a, ra
00AA	4700	mov     a, ra
00AB	205E	call    _LCD_Senddata
				;185		LCD_Senddata((data/1)%10+0x30);
00AC	5F06	clr     Address
00AD	4708	mov     a, data[0]
00AE	4083	mov     bLevel, a
00AF	0F0A	mov     a, AH
00B0	4084	mov     del, a
00B1	2069	call    L0069
00B2	4705	mov     a, data
00B3	4080	mov     ra, a
00B4	0F30	mov     a, 30H
00B5	4380	addm    a, ra
00B6	4700	mov     a, ra
00B7	205E	call    _LCD_Senddata
00B8	0003	ret
				;186	}
				;187	
				;188	//////////////////////////////
				;189	///Delay100us				;190	//////////////////////////////
				;191	void Delay100us(short del)						//				;192	{	short i,j;									//@fSYS=8MH,				;193		for(i=0;i<del;i++)
				_Delay100us:
				_Delay100us:
00B9	5F01	clr     rb
00BA	5F02	clr     rc
				_L3:
00BB	4701	mov     a, rb
00BC	4203	sub     a, del[0]
00BD	4702	mov     a, rc
00BE	5204	sbc     a, del[1]
00BF	3B8A	snz     SC
00C0	28CC	jmp     _L2
00C1	5F00	clr     ra
00C8	5481	inc     rb
00C9	3D0A	sz      Z
00CA	5482	inc     rc
00CB	28BB	jmp     _L3
				_L2:
00CC	0003	ret
				;194			for(j=0;j<=25;j++) GCC_NOP();
				_L6:
00C2	0000	nop
00C3	5480	inc     ra
00C4	4700	mov     a, ra
00C5	0A1A	sub     a, 1AH
00C6	390A	snz     Z
00C7	28C2	jmp     _L6
				;195	}	
				;196	
				;197	//////////////////////////////
				;198	///CS				;199	//////////////////////////////
				;200	void _SPI_CS(unsigned short isSelect)
				;201	{
				;202	    CS=isSelect;
				__SPI_CS:
				__SPI_CS:
00D7	4703	mov     a, isSelect[0]
00D8	0E01	and     a, 1H
00D9	4080	mov     ra, a
00DA	5100	swapa   ra
00DB	1885	rl      ACC
00DC	0EE0	and     a, E0H
00DD	4080	mov     ra, a
00DE	3696	clr     PB5
00DF	4700	mov     a, ra
00E0	0596	orm     a, PB
				;203	    _nop();
00E1	0000	nop
00E2	0003	ret
				;204	}
				;205	
				;206	//////////////////////////////
				;207	///SCL				;208	//////////////////////////////
				;209	void _SPI_SCL(unsigned short bLevel)
				;210	{
				;211	    SCK=bLevel;
				__SPI_SCL:
				__SPI_SCL:
00CD	4703	mov     a, bLevel[0]
00CE	4080	mov     ra, a
00CF	5B80	rrc     ra
00D0	5F00	clr     ra
00D1	5B80	rrc     ra
00D2	3792	clr     PA7
00D3	4700	mov     a, ra
00D4	0592	orm     a, PA
				;212	    _nop();
00D5	0000	nop
00D6	0003	ret
				;213	}
				;214	
				;215	//////////////////////////////
				;216	///SPI				;217	//////////////////////////////
				;218	void ADXL345_SPI_Write(unsigned char Address, unsigned char WriteData)
				;219	{
				_ADXL345_SPI_Write:
				_ADXL345_SPI_Write:
0151	4086	mov     Address[0], a
				;220	  char i;
				;221	 
				;222	  _SPI_CS(0);
0152	5F03	clr     bLevel
0153	5F04	clr     del
0154	20D7	call    __SPI_CS
0155	0F08	mov     a, 8H
0156	4087	mov     Address[1], a
				;223	 
				;224	  for(i=7; i >= 0; i--)
0157	0F07	mov     a, 7H
0158	4088	mov     data, a
0176	5588	dec     data
0177	5787	sdz     Address[1]
0178	2959	jmp     L0159
0179	0F08	mov     a, 8H
017A	4087	mov     Address[1], a
017B	0F07	mov     a, 7H
017C	4088	mov     data, a
				;225	  {
				;226	    // F-Edge
				;227	    _SPI_SCL(1);
				L0159:
0159	0F01	mov     a, 1H
015A	4083	mov     bLevel, a
015B	5F04	clr     del
015C	20CD	call    __SPI_SCL
				;228	    SDO = 0x1 & ((0x7F & Address) >> i);
015D	4706	mov     a, Address[0]
015E	4081	mov     rb, a
015F	7781	clr     rb.7
0160	5F02	clr     rc
0161	5408	inca    data
0162	2968	jmp     L0168
				L0163:
0163	340A	clr     C
0164	7F82	sz      rc.7
0165	300A	set     C
0166	5B82	rrc     rc
0167	5B81	rrc     rb
				L0168:
0168	1785	sdz     ACC
0169	2963	jmp     L0163
016A	0F01	mov     a, 1H
016B	4681	andm    a, rb
016C	5101	swapa   rb
016D	1885	rl      ACC
016E	0EE0	and     a, E0H
016F	4081	mov     rb, a
0170	3692	clr     PA5
0171	4701	mov     a, rb
0172	0592	orm     a, PA
				;229	    _SPI_SCL(0);
0173	5F03	clr     bLevel
0174	5F04	clr     del
0175	20CD	call    __SPI_SCL
				;230	  }
				;231	 
				;232	  for(i=7; i >= 0; i--)
0199	5588	dec     data
019A	5787	sdz     Address[1]
019B	297D	jmp     L017D
				;233	  {
				;234	    // F-Edge
				;235	    _SPI_SCL(1);
				L017D:
017D	0F01	mov     a, 1H
017E	4083	mov     bLevel, a
017F	5F04	clr     del
0180	20CD	call    __SPI_SCL
				;236	    SDO = 0x1 & ((WriteData) >> i);
0181	4705	mov     a, WriteData[0]
0182	4081	mov     rb, a
0183	5F02	clr     rc
0184	5408	inca    data
0185	298B	jmp     L018B
				L0186:
0186	340A	clr     C
0187	7F82	sz      rc.7
0188	300A	set     C
0189	5B82	rrc     rc
018A	5B81	rrc     rb
				L018B:
018B	1785	sdz     ACC
018C	2986	jmp     L0186
018D	0F01	mov     a, 1H
018E	4681	andm    a, rb
018F	5101	swapa   rb
0190	1885	rl      ACC
0191	0EE0	and     a, E0H
0192	4081	mov     rb, a
0193	3692	clr     PA5
0194	4701	mov     a, rb
0195	0592	orm     a, PA
				;237	    _SPI_SCL(0);
0196	5F03	clr     bLevel
0197	5F04	clr     del
0198	20CD	call    __SPI_SCL
				;238	  }
				;239	 
				;240	  _SPI_CS(1);
019C	0F01	mov     a, 1H
019D	4083	mov     bLevel, a
019E	5F04	clr     del
019F	20D7	call    __SPI_CS
01A0	0003	ret
				;241	}
				;242	
				;243	//---				;244	void LCD_Cmd(unsigned char data)
				;245	{
				_LCD_Cmd:
				_LCD_Cmd:
013B	4080	mov     ra, a
013C	4085	mov     data[0], a
				;246	    DATA_BUS = data;  //013D	4700	mov     a, ra
013E	00AA	mov     PG, a
				;247	    RS=0; RW=0; EN=1; //013F	342E	clr     PH0
0140	34AE	clr     PH1
0141	312E	set     PH2
				;248	    delay_ms(1);
0142	0F01	mov     a, 1H
0143	204D	call    _delay_ms
				;249	    EN=0;           //0144	352E	clr     PH2
0145	0003	ret
				;250	}
				;251	//---				;252	void LCD_Senddata(unsigned char data)
				;253	{
				_LCD_Senddata:
				_LCD_Senddata:
005E	4080	mov     ra, a
005F	4085	mov     data[0], a
				;254	    DATA_BUS = data;  //0060	4700	mov     a, ra
0061	00AA	mov     PG, a
				;255	    RS=1; RW=0; EN=1; //0062	302E	set     PH0
0063	34AE	clr     PH1
0064	312E	set     PH2
				;256	    delay_ms(1);
0065	0F01	mov     a, 1H
0066	204D	call    _delay_ms
				;257	    EN=0;           //0067	352E	clr     PH2
0068	0003	ret
				L0069:
0069	5F05	clr     data[0]
006A	0F08	mov     a, 8H
006B	4087	mov     Address[1], a
				L006C:
006C	340A	clr     C
006D	5A83	rlc     bLevel
006E	5A85	rlc     data[0]
006F	4705	mov     a, data[0]
0070	4204	sub     a, del
0071	380A	snz     C
0072	2877	jmp     L0077
0073	4705	mov     a, data[0]
0074	4204	sub     a, del
0075	4085	mov     data[0], a
0076	5483	inc     bLevel
				L0077:
0077	5787	sdz     Address[1]
0078	286C	jmp     L006C
0079	7C06	sz      Address.0
007A	4185	cpl     data[0]
007B	7C06	sz      Address.0
007C	5485	inc     data[0]
007D	7C86	sz      Address.1
007E	4183	cpl     bLevel
007F	7C86	sz      Address.1
0080	5483	inc     bLevel
0081	0003	ret
				;258	}
				;259	//---LCD				;260	void LCD_Reset(void)
				;261	{
				;262	    LCD_Cmd(0b00111000);//8bit				_LCD_Reset:
				_LCD_Reset:
0146	0F38	mov     a, 38H
0147	213B	call    _LCD_Cmd
				;263	                        //bit4:DL=1,8bit				;264	                        //bit3:N=1,				;265	                        //bit2:F=0,5*7				;266	    LCD_Cmd(0b00001100);//0148	0F0C	mov     a, CH
0149	213B	call    _LCD_Cmd
				;267	                        //bit2:D=1,				;268	                        //bit1:C=0,				;269	    LCD_Cmd(0b00000110);//014A	0F06	mov     a, 6H
014B	213B	call    _LCD_Cmd
				;270	                        //bit1:I/D=1,				;271	                        //bit0:S=0,				;272	    LCD_Cmd(0b00000001); //014C	0F01	mov     a, 1H
014D	213B	call    _LCD_Cmd
				;273	    LCD_Cmd(0b00000010); //014E	0F02	mov     a, 2H
014F	213B	call    _LCD_Cmd
0150	0003	ret
				;274	}
				;275	
				;276	//////////////////////////////
				;277	///Delay				;278	//////////////////////////////
				;279	void delay_ms(unsigned char del)
				;280	{	
				_delay_ms:
				_delay_ms:
004D	4084	mov     del[0], a
				;281		unsigned char i;
				;282		for(i=0;i<del;i++) GCC_DELAY(2000);		//004E	5F00	clr     ra
004F	2859	jmp     L0059
				L0050:
0050	0F01	mov     a, 1H
0051	4083	mov     bLevel, a
0052	0FF1	mov     a, F1H
0053	340B	clr     BP0
0054	348B	clr     BP1
0055	2043	call    L0043
0056	348B	clr     BP1
0057	340B	clr     BP0
0058	5480	inc     ra
				L0059:
0059	4700	mov     a, ra
005A	4204	sub     a, del[0]
005B	390A	snz     Z
005C	2850	jmp     L0050
005D	0003	ret
				;283	}
				;file C:\Users\IIIT\Desktop\ADXL345\try1\ADXL345_SPI\startup1_l.asm
				;1	;;--------------------------------------------------------------;;
				;2	;;    This file is part of the Holtek C Compiler V3 package     ;;
				;3	;;    For the initialization of static linkage variables        ;;
				;4	;;    Copyright (C) 2017 Holtek Semiconductor Inc.              ;;
				;5	;;    Version: 1.07 (Above IDE3000 V7.94)                       ;;
				;6	;;    Date:    2017/03/06                                        ;;
				;7	;;--------------------------------------------------------------;;
				;8	
				;9	acc equ [05h]
				;10	tblp equ [07h]
				;11	tblh equ [08h]
				;12	;;tbhp equ [09h] 
				;13	r0 equ [00h]
				;14	mp0 equ [01h]
				;15	r1 equ [02h]
				;16	mp1l equ [03h]
				;17	mp1h equ [04h]
				;18	z equ [0ah].2
				;19	c equ [0ah].0
				;20	
				;21	ifndef tbhp
				;22	tbhp equ [09h]
				;23	endif
				;24	 
				;25	extern startup_value_1:near
				;26	
				;27	@start .section 'code'
				;28	begin_startup_value:
				;29	  mov a,low (offset startup_value_1) 
				begin_startup_value:
				@start .SECTION 'CODE'
				_main_startup1:
				@start .SECTION 'CODE'
0002	0FEF	mov     a, EFH
				;30	  mov tblp,a
0003	0087	mov     TBLP, a
				;31	  mov a,high (offset startup_value_1) 
0004	0F01	mov     a, 1H
				;32	  mov tbhp,a
0005	0089	mov     TBHP, a
				;33	next_table:
				;34	  ;CLR WDT
				;35	  inc tblp
				next_table:
0006	1487	inc     TBLP
				;36	  sz z
0007	3D0A	sz      Z
				;37	  inc tbhp
0008	1489	inc     TBHP
				;38	ifdef USE_TABRDC
				;39	  tabrdc mp0
				;40	else
				;41	  tabrd mp0
0009	1D01	tabrd   MP0
				;42	endif
				;43	  sz mp0
000A	1081	sz      MP0
				;44	  jmp read_data
000B	280D	jmp     read_data
				;45	  jmp startupend1
000C	2822	jmp     startupend1
				;46	read_data:
				;47	  inc tblp
				read_data:
000D	1487	inc     TBLP
				;48	  sz z
000E	3D0A	sz      Z
				;49	  inc tbhp
000F	1489	inc     TBHP
				;50	ifdef USE_TABRDC
				;51	  tabrdc mp1l
				;52	else
				;53	  tabrd mp1l
0010	1D03	tabrd   MP1L
				;54	endif
				;55	  mov a,tblh
0011	0708	mov     a, TBLH
				;56	  mov mp1h,a
0012	0084	mov     MP1H, a
				;57	next_data:
				;58	  inc tblp
				next_data:
0013	1487	inc     TBLP
				;59	  sz z
0014	3D0A	sz      Z
				;60	  inc tbhp
0015	1489	inc     TBHP
				;61	ifdef USE_TABRDC
				;62	  tabrdc acc
				;63	else
				;64	  tabrd acc
0016	1D05	tabrd   ACC
				;65	endif
				;66	  mov r1,a
0017	0082	mov     [02H], a
				;67	  sdz mp0
				L0018:
0018	1781	sdz     MP0
				;68	  jmp $+2
0019	281B	jmp     L001B
				;69	  jmp next_table
001A	2806	jmp     next_table
				;70	  inc mp1l
				L001B:
001B	1483	inc     MP1L
				;71	  mov a,tblh
001C	0708	mov     a, TBLH
				;72	  mov r1,a
001D	0082	mov     [02H], a
				;73	  inc mp1l
001E	1483	inc     MP1L
				;74	  sdz mp0
001F	1781	sdz     MP0
				;75	  jmp next_data
0020	2813	jmp     next_data
				;76	  jmp next_table
0021	2806	jmp     next_table
				;77	
				;78	;end_startup_value:
				;79	
				;80	startupend1:
				;81	ifndef Disable_Bit_Initial
				;82		MOV A,high  bitdatasec1_start
				startupend1:
0022	0F00	mov     a, 0H
				;83		MOV mp1h,a
0023	0084	mov     MP1H, a
				;84		MOV A,offset bitdatasec1_end
0024	0F80	mov     a, 80H
				;85		mov mp1l,A
0025	0083	mov     MP1L, a
				;86		dec mp1l
0026	1583	dec     MP1L
				;87		clr z
0027	350A	clr     Z
				;88		sub a,offset bitdatasec1_start
0028	0A80	sub     a, 80H
				;89		sz z
0029	3D0A	sz      Z
				;90		jmp startupend2
002A	282F	jmp     startupend2
				;91	L0005:
				;92		set r1
				L0005:
002B	1F82	set     [02H]
				;93		dec mp1l
002C	1583	dec     MP1L
				;94		sdz  acc
002D	1785	sdz     ACC
				;95		jmp L0005
002E	282B	jmp     L0005
				;96	
				;97	startupend2:
				;98		MOV A,high  bitdatasec0_start
				startupend2:
002F	0F00	mov     a, 0H
				;99		MOV mp1h,a
0030	0084	mov     MP1H, a
				;100		MOV A,offset bitdatasec0_end
0031	0F80	mov     a, 80H
				;101		mov mp1l,A
0032	0083	mov     MP1L, a
				;102		dec mp1l
0033	1583	dec     MP1L
				;103		clr z
0034	350A	clr     Z
				;104		sub a,offset bitdatasec0_start
0035	0A80	sub     a, 80H
				;105		sz  z
0036	3D0A	sz      Z
				;106		jmp startupend3
0037	283C	jmp     startupend3
				;107	L0006:
				;108		clr r1
				L0006:
0038	1F02	clr     [02H]
				;109		dec mp1l
0039	1583	dec     MP1L
				;110		sdz  acc
003A	1785	sdz     ACC
				;111		jmp L0006
003B	2838	jmp     L0006
				;112	startupend3:
				;113	endif		
				;114	   
				;115	@ROMDATA_BASE .SECTION com_l 'CODE'  
				;116	startup_value:
				;117	;;linker range the initial value table here
				;118	
				;119	@BITDATASEC1 .SECTION com_l 'DATA'  
				;120	bitdatasec1_start:
				;121	
				;122	@BITDATASEC1 .SECTION com_e 'DATA'  
				;123	bitdatasec1_end:
				;124	
				;125	@BITDATASEC .SECTION com_l 'DATA'  
				;126	bitdatasec0_start:
				;127	
				;128	@BITDATASEC .SECTION com_e 'DATA'  
				;129	bitdatasec0_end:
				data .SECTION 'DATA'
				__papu DB DUP (?) ; __papu
				__pa DB DUP (?) ; __pa
				__pac DB DUP (?) ; __pac
				__pbpu DB DUP (?) ; __pbpu
				__pb DB DUP (?) ; __pb
				__pbc DB DUP (?) ; __pbc
				__pg DB DUP (?) ; __pg
				__pgc DB DUP (?) ; __pgc
				__ph DB DUP (?) ; __ph
				__phc DB DUP (?) ; __phc
				__smod DB DUP (?) ; __smod
				__wdtc DB DUP (?) ; __wdtc
				__cp0c DB DUP (?) ; __cp0c
				__cp1c DB DUP (?) ; __cp1c
				__simc0 DB DUP (?) ; __simc0
				__simc2 DB DUP (?) ; __simc2
				__scomc DB DUP (?) ; __scomc
				ra DB DUP (?)
				rb DB DUP (?)
				rc DB DUP (?)
				bLevel DB 2 DUP (?) ; bLevel
				del DB DUP (?) ; del
				data DB DUP (?) ; data
				Address DB DUP (?) ; Address
				data DB DUP (?) ; data
				ptrAcc DB DUP (?) ; ptrAcc
				ptrRawData DB DUP (?) ; ptrRawData
				DATAZ1 DB DUP (?) ; DATAZ1
				DATAZ0 DB DUP (?) ; DATAZ0
				DATAY1 DB DUP (?) ; DATAY1
				DATAY0 DB DUP (?) ; DATAY0
				DATAX1 DB DUP (?) ; DATAX1
				DATAX0 DB DUP (?) ; DATAX0
				deviceID DB DUP (?) ; deviceID
				AccZ DB 2 DUP (?) ; AccZ
				AccY DB 2 DUP (?) ; AccY
				AccX DB 2 DUP (?) ; AccX
				RawDataZ DB DUP (?) ; RawDataZ
				RawDataY DB DUP (?) ; RawDataY
				RawDataX DB DUP (?) ; RawDataX
				z DB DUP (?) ; z
				i DB DUP (?) ; i
				__ifs4 DB DUP (?) ; __ifs4
				y DB DUP (?) ; y
				x DB DUP (?) ; x
