				;file C:\Users\IIIT\Desktop\ADXL345\try1\ADXL345_SPI\ADXL345_SPI.c
				;1	#include <HT66F70A.h>
				;2	
				;3	#define	DATA_BUS _pg
				;4	#define RS  _ph0
				;5	#define RW  _ph1
				;6	#define EN  _ph2
				;7	
				;8	#define SDO _pa5	//				;9	#define SDA _pa6	//				;10	#define SCK _pa7
				;11	#define CS  _pb5
				;12	
				;13	#define SDOC _pac5	//				;14	#define SDAC _pac6
				;15	#define SCKC _pac7
				;16	#define CSC  _pbc5
				;17	
				;18	#define SDOPU _papu5	//				;19	#define SDAPU _papu6
				;20	#define SCKPU _papu7
				;21	#define CSPU  _pbpu5
				;22	
				;23	#define PAS2 _pas2	//pas 5 SDO
				;24	#define PAS3 _pas3	//pas 6 7 SDI SCL
				;25	#define PBS2 _pbs2	//pbs5 scs
				;26	
				;27	void Delay100us(short);	
				;28	void _SPI_CS(unsigned short);
				;29	void _SPI_SCL(unsigned short);
				;30	unsigned char ADXL345_SPI_Read(unsigned char);
				;31	void delay_ms(unsigned char);
				;32	void ADXL345_SPI_Write(unsigned char , unsigned char);
				;33	void LCD_Cmd(unsigned char data);
				;34	void LCD_Senddata(unsigned char data);
				;35	void LCD_Reset(void);
				;36	void PinSet(void);
				;37	void DataFormat(void);
				;38	void PrintLCD(unsigned char);
				;39	unsigned char DATAX0 = 0x32;
				;40	unsigned char DATAX1 = 0x33;
				;41	unsigned char DATAY0 = 0x34;
				;42	unsigned char DATAY1 = 0x35;
				;43	unsigned char DATAZ0 = 0x36;
				;44	unsigned char DATAZ1 = 0x37;
				;45	unsigned char i;
				;46	double x[10];
				;47	double y[10];
				;48	double z[10];
				;49	unsigned deviceID;
				;50	
				;51	
				;52	void main()
				;53	{
				@code .SECTION 'CODE'
				include HT66F70A.inc
0000	1F0B	clr     BP
0001	2802	jmp     begin_startup_value
				startupend3:
				@start .SECTION 'CODE'
003C	0F00	mov     a, 0H
003D	008B	mov     BP, a
003E	29CE	jmp     _main
				L003F:
003F	5F09	clr     rg[3]
0040	5F0D	clr     rg[7]
0041	0F96	mov     a, 96H
0042	408A	mov     rg[4], a
0043	289C	jmp     L009C
				L0044:
0044	5A12	rlca    rg[12]
0045	5A0E	rlca    rg[8]
0046	5A8B	rlc     rg[5]
0047	4093	mov     rg[13], a
0048	5F0E	clr     rg[8]
0049	7392	set     rg[12].7
004A	5093	sz      rg[13]
004B	284F	jmp     L004F
004C	5F10	clr     rg[10]
004D	5F11	clr     rg[11]
004E	5F12	clr     rg[12]
				L004F:
004F	5A09	rlca    rg[3]
0050	5A0D	rlca    rg[7]
0051	5A8B	rlc     rg[5]
0052	408A	mov     rg[4], a
0053	5F0D	clr     rg[7]
0054	7389	set     rg[3].7
0055	508A	sz      rg[4]
0056	0003	ret
				L0057:
0057	5F07	clr     rg[1]
0058	5F08	clr     rg[2]
0059	5F09	clr     rg[3]
				L005A:
005A	5F0D	clr     rg[7]
005B	0003	ret
				L005C:
005C	2044	call    L0044
005D	5F14	clr     rg[14]
005E	5F15	clr     rg[15]
005F	5F16	clr     rg[16]
0060	5F0F	clr     rg[9]
0061	0F7A	mov     a, 7AH
0062	4313	add     a, rg[13]
0063	438A	addm    a, rg[4]
0064	5B0B	rrca    rg[5]
0065	448B	xorm    a, rg[5]
0066	0F07	mov     a, 7H
0067	408E	mov     rg[8], a
				L0068:
0068	5B92	rrc     rg[12]
0069	5B91	rrc     rg[11]
006A	5B90	rrc     rg[10]
006B	380A	snz     C
006C	2875	jmp     L0075
006D	4707	mov     a, rg[1]
006E	4394	addm    a, rg[14]
006F	4708	mov     a, rg[2]
0070	5395	adcm    a, rg[15]
0071	4709	mov     a, rg[3]
0072	5396	adcm    a, rg[16]
0073	470D	mov     a, rg[7]
0074	538F	adcm    a, rg[9]
				L0075:
0075	340A	clr     C
0076	5A87	rlc     rg[1]
0077	5A88	rlc     rg[2]
0078	5A89	rlc     rg[3]
0079	5A8D	rlc     rg[7]
007A	578E	sdz     rg[8]
007B	2868	jmp     L0068
007C	0F11	mov     a, 11H
007D	408E	mov     rg[8], a
007E	2884	jmp     L0084
				L007F:
007F	340A	clr     C
0080	5B8F	rrc     rg[9]
0081	5B96	rrc     rg[16]
0082	5B95	rrc     rg[15]
0083	5B94	rrc     rg[14]
				L0084:
0084	5B92	rrc     rg[12]
0085	5B91	rrc     rg[11]
0086	5B90	rrc     rg[10]
0087	380A	snz     C
0088	2891	jmp     L0091
0089	4707	mov     a, rg[1]
008A	4394	addm    a, rg[14]
008B	4708	mov     a, rg[2]
008C	5395	adcm    a, rg[15]
008D	4709	mov     a, rg[3]
008E	5396	adcm    a, rg[16]
008F	470D	mov     a, rg[7]
0090	538F	adcm    a, rg[9]
				L0091:
0091	578E	sdz     rg[8]
0092	287F	jmp     L007F
0093	4714	mov     a, rg[14]
0094	4087	mov     rg[1], a
0095	4715	mov     a, rg[15]
0096	4088	mov     rg[2], a
0097	4716	mov     a, rg[16]
0098	4089	mov     rg[3], a
0099	470F	mov     a, rg[9]
009A	408D	mov     rg[7], a
009B	289C	jmp     L009C
				L009C:
009C	508A	sz      rg[4]
009D	289F	jmp     L009F
009E	2857	jmp     L0057
				L009F:
009F	508D	sz      rg[7]
00A0	28B6	jmp     L00B6
00A1	4707	mov     a, rg[1]
00A2	4508	or      a, rg[2]
00A3	4509	or      a, rg[3]
00A4	3D0A	sz      Z
00A5	285A	jmp     L005A
				L00A6:
00A6	7F89	sz      rg[3].7
00A7	28C7	jmp     L00C7
00A8	578A	sdz     rg[4]
00A9	28AC	jmp     L00AC
00AA	700C	set     rg[6].0
00AB	2857	jmp     L0057
				L00AC:
00AC	340A	clr     C
00AD	5A87	rlc     rg[1]
00AE	5A88	rlc     rg[2]
00AF	5A89	rlc     rg[3]
00B0	28A6	jmp     L00A6
				L00B1:
00B1	340A	clr     C
00B2	5B8D	rrc     rg[7]
00B3	5B89	rrc     rg[3]
00B4	5B88	rrc     rg[2]
00B5	5B87	rrc     rg[1]
				L00B6:
00B6	548A	inc     rg[4]
00B7	560A	siza    rg[4]
00B8	28BB	jmp     L00BB
00B9	708C	set     rg[6].1
00BA	28D0	jmp     L00D0
				L00BB:
00BB	570D	sdza    rg[7]
00BC	28B1	jmp     L00B1
00BD	300A	set     C
00BE	5387	adcm    a, rg[1]
00BF	5388	adcm    a, rg[2]
00C0	5389	adcm    a, rg[3]
00C1	3C0A	sz      C
00C2	548A	inc     rg[4]
00C3	5B8D	rrc     rg[7]
00C4	5B89	rrc     rg[3]
00C5	5B88	rrc     rg[2]
00C6	5B87	rrc     rg[1]
				L00C7:
00C7	508A	sz      rg[4]
00C8	28CA	jmp     L00CA
00C9	2857	jmp     L0057
				L00CA:
00CA	5B8B	rrc     rg[5]
00CB	5B0A	rrca    rg[4]
00CC	408D	mov     rg[7], a
00CD	380A	snz     C
00CE	7789	clr     rg[3].7
00CF	0003	ret
				L00D0:
00D0	5F87	set     rg[1]
00D1	5F88	set     rg[2]
00D2	5F89	set     rg[3]
00D3	5F8D	set     rg[7]
00D4	780B	snz     rg[5].0
00D5	778D	clr     rg[7].7
00D6	0003	ret
				L00D7:
00D7	1483	inc     MP1L
				L00D8:
00D8	0702	mov     a, [02H]
00D9	0003	ret
				;54		PinSet();	//				_main:
				_main:
01CE	21AD	call    _PinSet
				;55		delay_ms(2);
01CF	0F02	mov     a, 2H
01D0	219C	call    _delay_ms
				;56		ADXL345_SPI_Write(0x31, 0x0B); //01D1	0F0B	mov     a, BH
01D2	4099	mov     data, a
01D3	0F31	mov     a, 31H
01D4	213E	call    _ADXL345_SPI_Write
				;57		ADXL345_SPI_Write(0x2D, 0x08); //01D5	0F08	mov     a, 8H
01D6	4099	mov     data, a
01D7	0F2D	mov     a, 2DH
01D8	213E	call    _ADXL345_SPI_Write
				;58		ADXL345_SPI_Write(0x2c, 0x0F);
01D9	0F0F	mov     a, FH
01DA	4099	mov     data, a
01DB	0F2C	mov     a, 2CH
01DC	213E	call    _ADXL345_SPI_Write
				;59		ADXL345_SPI_Write(0x2E, 0x80);
01DD	0F80	mov     a, 80H
01DE	4099	mov     data, a
01DF	0F2E	mov     a, 2EH
01E0	213E	call    _ADXL345_SPI_Write
				;60		
				;61		/*LCD_Reset();		//LCD				;62		delay_ms(250);		//				;63		LCD_Cmd(0xc0);  	//LCD				;64		delay_ms(250);   */
				;65		deviceID = ADXL345_SPI_Read(0x00);
01E1	0F00	mov     a, 0H
01E2	20F0	call    _ADXL345_SPI_Read
01E3	4080	mov     ra, a
01E4	4700	mov     a, ra
01E5	40AD	mov     deviceID[0], a
01E6	5F2E	clr     deviceID[1]
				;66	
				;67		while(1)
				;68		{
				;69			for(i=0;i<10;i++)
				_L26:
01E7	5F2C	clr     i[0]
				_L24:
01E8	472C	mov     a, i[0]
01E9	409E	mov     _main_2[1], a
01EA	0F09	mov     a, 9H
01EB	421E	sub     a, _main_2[1]
01EC	380A	snz     C
01ED	29E7	jmp     _L26
034B	5400	inca    ra
034C	40AC	mov     i[0], a
034D	29E8	jmp     _L24
034E	2B4E	jmp     $
				;70			{
				;71			x[i] = ((ADXL345_SPI_Read(DATAX1)<<8)&0xFF00)|(ADXL345_SPI_Read(DATAX0)&0xFF);
01EE	4729	mov     a, DATAX1[0]
01EF	20F0	call    _ADXL345_SPI_Read
01F0	409D	mov     _main_2, a
01F1	4726	mov     a, DATAX0[0]
01F2	20F0	call    _ADXL345_SPI_Read
01F3	4080	mov     ra, a
01F4	471E	mov     a, _main_2[1]
01F5	4081	mov     rb, a
01F6	5F02	clr     rc
01F7	340A	clr     C
01F8	5A81	rlc     rb
01F9	5A82	rlc     rc
01FA	340A	clr     C
01FB	5A81	rlc     rb
01FC	5A82	rlc     rc
01FD	471D	mov     a, _main_2
01FE	40A1	mov     _main_2[4], a
01FF	5F20	clr     _main_2[3]
0200	4721	mov     a, _main_2[4]
0201	4084	mov     re, a
0202	4700	mov     a, ra
0203	4520	or      a, _main_2[3]
0204	4083	mov     rd, a
0205	4704	mov     a, re
0206	4088	mov     rg[2], a
0207	4703	mov     a, rd
0208	4087	mov     rg[1], a
0209	740B	clr     rg[5].0
020A	203F	call    L003F
020B	470D	mov     a, rg[7]
020C	4086	mov     rg, a
020D	4709	mov     a, rg[3]
020E	4085	mov     rf, a
020F	4708	mov     a, rg[2]
0210	4084	mov     re, a
0211	4707	mov     a, rg[1]
0212	4083	mov     rd, a
0213	0F80	mov     a, 80H
0214	4301	add     a, rb
0215	0083	mov     MP1L, a
0216	0F01	mov     a, 1H
0217	5302	adc     a, rc
0218	0084	mov     MP1H, a
0219	4703	mov     a, rd
021A	0082	mov     [02H], a
021B	1483	inc     MP1L
021C	4704	mov     a, re
021D	0082	mov     [02H], a
021E	1483	inc     MP1L
021F	4705	mov     a, rf
0220	0082	mov     [02H], a
0221	1483	inc     MP1L
0222	4706	mov     a, rg
0223	0082	mov     [02H], a
				;72			x[i] = x[i] * 4;
0224	472C	mov     a, i[0]
0225	4081	mov     rb, a
0226	5F02	clr     rc
0227	340A	clr     C
0228	5A01	rlca    rb
0229	409E	mov     _main_2[1], a
022A	5A02	rlca    rc
022B	409F	mov     _main_2[2], a
022C	340A	clr     C
022D	5A9E	rlc     _main_2[1]
022E	5A9F	rlc     _main_2[2]
022F	0F80	mov     a, 80H
0230	431E	add     a, _main_2[1]
0231	4081	mov     rb, a
0232	0F01	mov     a, 1H
0233	531F	adc     a, _main_2[2]
0234	4082	mov     rc, a
0235	4701	mov     a, rb
0236	0083	mov     MP1L, a
0237	4702	mov     a, rc
0238	0084	mov     MP1H, a
0239	20D8	call    L00D8
023A	4083	mov     rd, a
023B	20D7	call    L00D7
023C	4084	mov     re, a
023D	20D7	call    L00D7
023E	4085	mov     rf, a
023F	20D7	call    L00D7
0240	4086	mov     rg, a
0241	4706	mov     a, rg
0242	408D	mov     rg[7], a
0243	4705	mov     a, rf
0244	4089	mov     rg[3], a
0245	4704	mov     a, re
0246	4088	mov     rg[2], a
0247	4703	mov     a, rd
0248	4087	mov     rg[1], a
0249	0F40	mov     a, 40H
024A	408E	mov     rg[8], a
024B	0F80	mov     a, 80H
024C	4092	mov     rg[12], a
024D	0F00	mov     a, 0H
024E	4091	mov     rg[11], a
024F	0F00	mov     a, 0H
0250	4090	mov     rg[10], a
0251	205C	call    L005C
0252	470D	mov     a, rg[7]
0253	4086	mov     rg, a
0254	4709	mov     a, rg[3]
0255	4085	mov     rf, a
0256	4708	mov     a, rg[2]
0257	4084	mov     re, a
0258	4707	mov     a, rg[1]
0259	4083	mov     rd, a
025A	4701	mov     a, rb
025B	0083	mov     MP1L, a
025C	4702	mov     a, rc
025D	0084	mov     MP1H, a
025E	4703	mov     a, rd
025F	0082	mov     [02H], a
0260	1483	inc     MP1L
0261	4704	mov     a, re
0262	0082	mov     [02H], a
0263	1483	inc     MP1L
0264	4705	mov     a, rf
0265	0082	mov     [02H], a
0266	1483	inc     MP1L
0267	4706	mov     a, rg
0268	0082	mov     [02H], a
				;73			/*Delay100us(100);
				;74		
				;75			LCD_Cmd(0x80);  //				;76			delay_ms(150);
				;77		 	PrintLCD(datax);*/
				;78		  		
				;79		  	//delay_ms(1250);
				;80		  	
				;81			y[i] = ((ADXL345_SPI_Read(DATAY1)<<8)&0xFF00)|(ADXL345_SPI_Read(DATAX0)&0xFF);
0269	4728	mov     a, DATAY1[0]
026A	20F0	call    _ADXL345_SPI_Read
026B	409D	mov     _main_2, a
026C	4726	mov     a, DATAX0[0]
026D	20F0	call    _ADXL345_SPI_Read
026E	4080	mov     ra, a
026F	471D	mov     a, _main_2
0270	40A3	mov     _main_2[6], a
0271	5F22	clr     _main_2[5]
0272	4723	mov     a, _main_2[6]
0273	4084	mov     re, a
0274	4700	mov     a, ra
0275	4522	or      a, _main_2[5]
0276	4083	mov     rd, a
0277	4704	mov     a, re
0278	4088	mov     rg[2], a
0279	4703	mov     a, rd
027A	4087	mov     rg[1], a
027B	740B	clr     rg[5].0
027C	203F	call    L003F
027D	470D	mov     a, rg[7]
027E	4086	mov     rg, a
027F	4709	mov     a, rg[3]
0280	4085	mov     rf, a
0281	4708	mov     a, rg[2]
0282	4084	mov     re, a
0283	4707	mov     a, rg[1]
0284	4083	mov     rd, a
0285	0FD7	mov     a, D7H
0286	431E	add     a, _main_2[1]
0287	0083	mov     MP1L, a
0288	0F00	mov     a, 0H
0289	531F	adc     a, _main_2[2]
028A	0084	mov     MP1H, a
028B	4703	mov     a, rd
028C	0082	mov     [02H], a
028D	1483	inc     MP1L
028E	4704	mov     a, re
028F	0082	mov     [02H], a
0290	1483	inc     MP1L
0291	4705	mov     a, rf
0292	0082	mov     [02H], a
0293	1483	inc     MP1L
0294	4706	mov     a, rg
0295	0082	mov     [02H], a
				;82			y[i] = y[i] * 4;
0296	472C	mov     a, i[0]
0297	4081	mov     rb, a
0298	5F02	clr     rc
0299	340A	clr     C
029A	5A01	rlca    rb
029B	409E	mov     _main_2[1], a
029C	5A02	rlca    rc
029D	409F	mov     _main_2[2], a
029E	340A	clr     C
029F	5A9E	rlc     _main_2[1]
02A0	5A9F	rlc     _main_2[2]
02A1	0FD7	mov     a, D7H
02A2	431E	add     a, _main_2[1]
02A3	4081	mov     rb, a
02A4	0F00	mov     a, 0H
02A5	531F	adc     a, _main_2[2]
02A6	4082	mov     rc, a
02A7	4701	mov     a, rb
02A8	0083	mov     MP1L, a
02A9	4702	mov     a, rc
02AA	0084	mov     MP1H, a
02AB	20D8	call    L00D8
02AC	4083	mov     rd, a
02AD	20D7	call    L00D7
02AE	4084	mov     re, a
02AF	20D7	call    L00D7
02B0	4085	mov     rf, a
02B1	20D7	call    L00D7
02B2	4086	mov     rg, a
02B3	4706	mov     a, rg
02B4	408D	mov     rg[7], a
02B5	4705	mov     a, rf
02B6	4089	mov     rg[3], a
02B7	4704	mov     a, re
02B8	4088	mov     rg[2], a
02B9	4703	mov     a, rd
02BA	4087	mov     rg[1], a
02BB	0F40	mov     a, 40H
02BC	408E	mov     rg[8], a
02BD	0F80	mov     a, 80H
02BE	4092	mov     rg[12], a
02BF	0F00	mov     a, 0H
02C0	4091	mov     rg[11], a
02C1	0F00	mov     a, 0H
02C2	4090	mov     rg[10], a
02C3	205C	call    L005C
02C4	470D	mov     a, rg[7]
02C5	4086	mov     rg, a
02C6	4709	mov     a, rg[3]
02C7	4085	mov     rf, a
02C8	4708	mov     a, rg[2]
02C9	4084	mov     re, a
02CA	4707	mov     a, rg[1]
02CB	4083	mov     rd, a
02CC	4701	mov     a, rb
02CD	0083	mov     MP1L, a
02CE	4702	mov     a, rc
02CF	0084	mov     MP1H, a
02D0	4703	mov     a, rd
02D1	0082	mov     [02H], a
02D2	1483	inc     MP1L
02D3	4704	mov     a, re
02D4	0082	mov     [02H], a
02D5	1483	inc     MP1L
02D6	4705	mov     a, rf
02D7	0082	mov     [02H], a
02D8	1483	inc     MP1L
02D9	4706	mov     a, rg
02DA	0082	mov     [02H], a
				;83		  	/*Delay100us(100);
				;84		  	LCD_Cmd(0x85);	//				;85		 	delay_ms(150);
				;86		  	PrintLCD(datax);
				;87			delay_ms(50);	*/  		
				;88			z[i] = ((ADXL345_SPI_Read(DATAZ1)<<8)&0xFF00)|(ADXL345_SPI_Read(DATAX0)&0xFF);
02DB	4727	mov     a, DATAZ1[0]
02DC	20F0	call    _ADXL345_SPI_Read
02DD	409D	mov     _main_2, a
02DE	4726	mov     a, DATAX0[0]
02DF	20F0	call    _ADXL345_SPI_Read
02E0	4080	mov     ra, a
02E1	471D	mov     a, _main_2
02E2	40A5	mov     _main_2[8], a
02E3	5F24	clr     _main_2[7]
02E4	4725	mov     a, _main_2[8]
02E5	4084	mov     re, a
02E6	4700	mov     a, ra
02E7	4524	or      a, _main_2[7]
02E8	4083	mov     rd, a
02E9	4704	mov     a, re
02EA	4088	mov     rg[2], a
02EB	4703	mov     a, rd
02EC	4087	mov     rg[1], a
02ED	740B	clr     rg[5].0
02EE	203F	call    L003F
02EF	470D	mov     a, rg[7]
02F0	4086	mov     rg, a
02F1	4709	mov     a, rg[3]
02F2	4085	mov     rf, a
02F3	4708	mov     a, rg[2]
02F4	4084	mov     re, a
02F5	4707	mov     a, rg[1]
02F6	4083	mov     rd, a
02F7	0FAF	mov     a, AFH
02F8	431E	add     a, _main_2[1]
02F9	0083	mov     MP1L, a
02FA	0F00	mov     a, 0H
02FB	531F	adc     a, _main_2[2]
02FC	0084	mov     MP1H, a
02FD	4703	mov     a, rd
02FE	0082	mov     [02H], a
02FF	1483	inc     MP1L
0300	4704	mov     a, re
0301	0082	mov     [02H], a
0302	1483	inc     MP1L
0303	4705	mov     a, rf
0304	0082	mov     [02H], a
0305	1483	inc     MP1L
0306	4706	mov     a, rg
0307	0082	mov     [02H], a
				;89			z[i] = z[i] * 4;
0308	472C	mov     a, i[0]
0309	4080	mov     ra, a
030A	4700	mov     a, ra
030B	4081	mov     rb, a
030C	5F02	clr     rc
030D	340A	clr     C
030E	5A81	rlc     rb
030F	5A82	rlc     rc
0310	340A	clr     C
0311	5A81	rlc     rb
0312	5A82	rlc     rc
0313	0FAF	mov     a, AFH
0314	4381	addm    a, rb
0315	0F00	mov     a, 0H
0316	5382	adcm    a, rc
0317	4701	mov     a, rb
0318	0083	mov     MP1L, a
0319	4702	mov     a, rc
031A	0084	mov     MP1H, a
031B	20D8	call    L00D8
031C	4083	mov     rd, a
031D	20D7	call    L00D7
031E	4084	mov     re, a
031F	20D7	call    L00D7
0320	4085	mov     rf, a
0321	20D7	call    L00D7
0322	4086	mov     rg, a
0323	4706	mov     a, rg
0324	408D	mov     rg[7], a
0325	4705	mov     a, rf
0326	4089	mov     rg[3], a
0327	4704	mov     a, re
0328	4088	mov     rg[2], a
0329	4703	mov     a, rd
032A	4087	mov     rg[1], a
032B	0F40	mov     a, 40H
032C	408E	mov     rg[8], a
032D	0F80	mov     a, 80H
032E	4092	mov     rg[12], a
032F	0F00	mov     a, 0H
0330	4091	mov     rg[11], a
0331	0F00	mov     a, 0H
0332	4090	mov     rg[10], a
0333	205C	call    L005C
0334	470D	mov     a, rg[7]
0335	4086	mov     rg, a
0336	4709	mov     a, rg[3]
0337	4085	mov     rf, a
0338	4708	mov     a, rg[2]
0339	4084	mov     re, a
033A	4707	mov     a, rg[1]
033B	4083	mov     rd, a
033C	4701	mov     a, rb
033D	0083	mov     MP1L, a
033E	4702	mov     a, rc
033F	0084	mov     MP1H, a
0340	4703	mov     a, rd
0341	0082	mov     [02H], a
0342	1483	inc     MP1L
0343	4704	mov     a, re
0344	0082	mov     [02H], a
0345	1483	inc     MP1L
0346	4705	mov     a, rf
0347	0082	mov     [02H], a
0348	1483	inc     MP1L
0349	4706	mov     a, rg
034A	0082	mov     [02H], a
				;90			}
				;91		}
				;92	}
				;93	
				;94	//////////////////////////////
				;95	///				;96	//////////////////////////////
				;97	void PinSet(void)
				;98	{
				;99		_wdtc = 0xa8;//				_PinSet:
				_PinSet:
01AD	0FA8	mov     a, A8H
01AE	00BE	mov     WDTC, a
				;100		_cp0c = 0x00;	//01AF	1F46	clr     CP0C
				;101		_cp1c = 0x00;
01B0	1F47	clr     CP1C
				;102		_scomen = 0;
01B1	367F	clr     SCOMEN
				;103		_smod = 0xe0;//4MHz
01B2	0FE0	mov     a, E0H
01B3	00BA	mov     SMOD, a
				;104		_sdis0=0;
01B4	B64C	lclr    SDIS0
				;105		_sdis1=0;
01B6	B6CC	lclr    SDIS1
				;106		_simen=1;  
01B8	30EC	set     SIMEN
				;107		_simc0=0x42;
01B9	0F42	mov     a, 42H
01BA	00EC	mov     SIMC0, a
				;108		_simc2=0x24;
01BB	0F24	mov     a, 24H
01BC	00EF	mov     SIMC2, a
				;109		
				;110		//PAS2=0x10;  //				;111		//PAS3=0x22;  
				;112		//PBS2=0x10;
				;113	
				;114		
				;115		_ifs4=0;
01BD	9F4C	lclr    IFS4
				;116		
				;117		_pac5=0; 	_pac6=1; 	_pac7=0;		CSC=0;//01BF	3693	clr     PAC5
01C0	3313	set     PAC6
01C1	3793	clr     PAC7
01C2	3697	clr     PBC5
				;118		_phc0 = 0; _phc1 = 0; _phc2 = 0; //01C3	342F	clr     PHC0
01C4	34AF	clr     PHC1
01C5	352F	clr     PHC2
				;119		SDAPU=1;	SDOPU=1;	SCKPU=1;	CSPU=1;		SCK=0;		CS=1;		_pgc = 0x00;   
01C6	3311	set     PAPU6
01C7	3291	set     PAPU5
01C8	3391	set     PAPU7
01C9	3295	set     PBPU5
01CA	3792	clr     PA7
01CB	3296	set     PB5
01CC	1F2B	clr     PGC
01CD	0003	ret
				;120	}
				;121	
				;122	
				;123	//////////////////////////////
				;124	///SPI				;125	//////////////////////////////
				;126	unsigned char ADXL345_SPI_Read(unsigned char Address)
				;127	{
				_ADXL345_SPI_Read:
				_ADXL345_SPI_Read:
00F0	4099	mov     Address[0], a
				;128	  unsigned char ReadData=0;
0120	5F1B	clr     ReadData[0]
				;129	  unsigned char tempSDO;
				;130	  char i;
				;131	 
				;132	  _SPI_CS(0);
00F1	5F17	clr     bLevel
00F2	5F18	clr     del
00F3	20E4	call    __SPI_CS
00F4	0F08	mov     a, 8H
00F5	409A	mov     Address, a
				;133	  
				;134	  for(i = 7; i >= 0; i-- )
00F6	0F07	mov     a, 7H
00F7	409B	mov     ReadData[0], a
0115	559B	dec     ReadData[0]
0116	579A	sdz     Address
0117	28F8	jmp     L00F8
				;135	  {
				;136	    // F-Edge
				;137	    _SPI_SCL(1);
				L00F8:
00F8	0F01	mov     a, 1H
00F9	4097	mov     bLevel, a
00FA	5F18	clr     del
00FB	20DA	call    __SPI_SCL
				;138	    SDO = 0x1 & ((0x80 | Address) >> i);
00FC	4719	mov     a, Address[0]
00FD	4081	mov     rb, a
00FE	7381	set     rb.7
00FF	5F02	clr     rc
0100	541B	inca    ReadData[0]
0101	2907	jmp     L0107
				L0102:
0102	340A	clr     C
0103	7F82	sz      rc.7
0104	300A	set     C
0105	5B82	rrc     rc
0106	5B81	rrc     rb
				L0107:
0107	1785	sdz     ACC
0108	2902	jmp     L0102
0109	0F01	mov     a, 1H
010A	4681	andm    a, rb
010B	5101	swapa   rb
010C	1885	rl      ACC
010D	0EE0	and     a, E0H
010E	4081	mov     rb, a
010F	3692	clr     PA5
0110	4701	mov     a, rb
0111	0592	orm     a, PA
				;139	    _SPI_SCL(0);
0112	5F17	clr     bLevel
0113	5F18	clr     del
0114	20DA	call    __SPI_SCL
				;140	  }
				;141	 
				;142	  //===========================
				;143	  _SPI_SCL(1);
0118	0F01	mov     a, 1H
0119	4097	mov     bLevel, a
011A	5F18	clr     del
011B	20DA	call    __SPI_SCL
011C	0F08	mov     a, 8H
011D	409A	mov     Address, a
				;144	  //===========================
				;145	 
				;146	  for(i = 7; i >= 0; i-- )
011E	0F07	mov     a, 7H
011F	409C	mov     data, a
0135	559C	dec     data
0136	579A	sdz     Address
0137	2921	jmp     L0121
				;147	  {
				;148	    // R-Edge
				;149	    _SPI_SCL(0);
				L0121:
0121	5F17	clr     bLevel
0122	5F18	clr     del
0123	20DA	call    __SPI_SCL
				;150	    _SPI_SCL(1);
0124	0F01	mov     a, 1H
0125	4097	mov     bLevel, a
0126	5F18	clr     del
0127	20DA	call    __SPI_SCL
				;151	    tempSDO = SDA; // Read bit
0128	5F01	clr     rb
0129	3F12	sz      PA6
012A	5481	inc     rb
				;152	 
				;153	    ReadData |= tempSDO << i;
012B	5F02	clr     rc
012C	541C	inca    data
012D	2931	jmp     L0131
				L012E:
012E	340A	clr     C
012F	5A81	rlc     rb
0130	5A82	rlc     rc
				L0131:
0131	1785	sdz     ACC
0132	292E	jmp     L012E
0133	4701	mov     a, rb
0134	459B	orm     a, ReadData[0]
				;154	  }
				;155	 
				;156	  _SPI_CS(1);
0138	0F01	mov     a, 1H
0139	4097	mov     bLevel, a
013A	5F18	clr     del
013B	20E4	call    __SPI_CS
				;157	  return ReadData & 0xFF;
				;158	}
013C	471B	mov     a, ReadData[0]
013D	0003	ret
				;159	
				;160	//////////////////////////////
				;161	///LCD				;162	//////////////////////////////
				;163	void PrintLCD(unsigned char data)
				;164	{
				_PrintLCD:
				_PrintLCD:
0373	4080	mov     ra, a
0374	409C	mov     data[0], a
				;165		
				;166		LCD_Senddata((data/100)%10+0x30); 
0375	5F1A	clr     Address
0376	4700	mov     a, ra
0377	4097	mov     bLevel, a
0378	0F64	mov     a, 64H
0379	4098	mov     del, a
037A	235A	call    L035A
037B	4717	mov     a, bLevel
037C	4080	mov     ra, a
037D	5F1A	clr     Address
037E	4700	mov     a, ra
037F	4097	mov     bLevel, a
0380	0F0A	mov     a, AH
0381	4098	mov     del, a
0382	235A	call    L035A
0383	4719	mov     a, data
0384	4080	mov     ra, a
0385	0F30	mov     a, 30H
0386	4380	addm    a, ra
0387	4700	mov     a, ra
0388	234F	call    _LCD_Senddata
				;167		LCD_Senddata((data/10)%10+0x30);
0389	5F1A	clr     Address
038A	471C	mov     a, data[0]
038B	4097	mov     bLevel, a
038C	0F0A	mov     a, AH
038D	4098	mov     del, a
038E	235A	call    L035A
038F	4717	mov     a, bLevel
0390	4080	mov     ra, a
0391	5F1A	clr     Address
0392	4700	mov     a, ra
0393	4097	mov     bLevel, a
0394	0F0A	mov     a, AH
0395	4098	mov     del, a
0396	235A	call    L035A
0397	4719	mov     a, data
0398	4080	mov     ra, a
0399	0F30	mov     a, 30H
039A	4380	addm    a, ra
039B	4700	mov     a, ra
039C	234F	call    _LCD_Senddata
				;168		LCD_Senddata((data/1)%10+0x30);
039D	5F1A	clr     Address
039E	471C	mov     a, data[0]
039F	4097	mov     bLevel, a
03A0	0F0A	mov     a, AH
03A1	4098	mov     del, a
03A2	235A	call    L035A
03A3	4719	mov     a, data
03A4	4080	mov     ra, a
03A5	0F30	mov     a, 30H
03A6	4380	addm    a, ra
03A7	4700	mov     a, ra
03A8	234F	call    _LCD_Senddata
03A9	0003	ret
				;169	}
				;170	
				;171	//////////////////////////////
				;172	///Delay100us				;173	//////////////////////////////
				;174	void Delay100us(short del)						//				;175	{	short i,j;									//@fSYS=8MH,				;176		for(i=0;i<del;i++)
				_Delay100us:
				_Delay100us:
03C0	5F01	clr     rb
03C1	5F02	clr     rc
				_L3:
03C2	4701	mov     a, rb
03C3	4217	sub     a, del[0]
03C4	4702	mov     a, rc
03C5	5218	sbc     a, del[1]
03C6	3B8A	snz     SC
03C7	2BD3	jmp     _L2
03C8	5F00	clr     ra
03CF	5481	inc     rb
03D0	3D0A	sz      Z
03D1	5482	inc     rc
03D2	2BC2	jmp     _L3
				_L2:
03D3	0003	ret
				startup_value:
				@ROMDATA_BASE .SECTION 'CODE'
03D4	0006	dc	00006H
03D5	00A6	mov     PF, a
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
03D6	3732	clr     TB1F
03D7	3335	set     T1BF
03D8	3436	clr     T3PE
				;177			for(j=0;j<=25;j++) GCC_NOP();
				_L6:
03C9	0000	nop
03CA	5480	inc     ra
03CB	4700	mov     a, ra
03CC	0A1A	sub     a, 1AH
03CD	390A	snz     Z
03CE	2BC9	jmp     _L6
				;178	}	
				;179	
				;180	//////////////////////////////
				;181	///CS				;182	//////////////////////////////
				;183	void _SPI_CS(unsigned short isSelect)
				;184	{
				;185	    CS=isSelect;
				__SPI_CS:
				__SPI_CS:
00E4	4717	mov     a, isSelect[0]
00E5	0E01	and     a, 1H
00E6	4080	mov     ra, a
00E7	5100	swapa   ra
00E8	1885	rl      ACC
00E9	0EE0	and     a, E0H
00EA	4080	mov     ra, a
00EB	3696	clr     PB5
00EC	4700	mov     a, ra
00ED	0596	orm     a, PB
				;186	    _nop();
00EE	0000	nop
00EF	0003	ret
				;187	}
				;188	
				;189	//////////////////////////////
				;190	///SCL				;191	//////////////////////////////
				;192	void _SPI_SCL(unsigned short bLevel)
				;193	{
				;194	    SCK=bLevel;
				__SPI_SCL:
				__SPI_SCL:
00DA	4717	mov     a, bLevel[0]
00DB	4080	mov     ra, a
00DC	5B80	rrc     ra
00DD	5F00	clr     ra
00DE	5B80	rrc     ra
00DF	3792	clr     PA7
00E0	4700	mov     a, ra
00E1	0592	orm     a, PA
				;195	    _nop();
00E2	0000	nop
00E3	0003	ret
				;196	}
				;197	
				;198	//////////////////////////////
				;199	///SPI				;200	//////////////////////////////
				;201	void ADXL345_SPI_Write(unsigned char Address, unsigned char WriteData)
				;202	{
				_ADXL345_SPI_Write:
				_ADXL345_SPI_Write:
013E	409A	mov     Address[0], a
				;203	  char i;
				;204	 
				;205	  _SPI_CS(0);
013F	5F17	clr     bLevel
0140	5F18	clr     del
0141	20E4	call    __SPI_CS
0142	0F08	mov     a, 8H
0143	409B	mov     ReadData, a
				;206	 
				;207	  for(i=7; i >= 0; i--)
0144	0F07	mov     a, 7H
0145	409C	mov     data, a
0163	559C	dec     data
0164	579B	sdz     ReadData
0165	2946	jmp     L0146
0166	0F08	mov     a, 8H
0167	409B	mov     ReadData, a
0168	0F07	mov     a, 7H
0169	409C	mov     data, a
				;208	  {
				;209	    // F-Edge
				;210	    _SPI_SCL(1);
				L0146:
0146	0F01	mov     a, 1H
0147	4097	mov     bLevel, a
0148	5F18	clr     del
0149	20DA	call    __SPI_SCL
				;211	    SDO = 0x1 & ((0x7F & Address) >> i);
014A	471A	mov     a, Address[0]
014B	4081	mov     rb, a
014C	7781	clr     rb.7
014D	5F02	clr     rc
014E	541C	inca    data
014F	2955	jmp     L0155
				L0150:
0150	340A	clr     C
0151	7F82	sz      rc.7
0152	300A	set     C
0153	5B82	rrc     rc
0154	5B81	rrc     rb
				L0155:
0155	1785	sdz     ACC
0156	2950	jmp     L0150
0157	0F01	mov     a, 1H
0158	4681	andm    a, rb
0159	5101	swapa   rb
015A	1885	rl      ACC
015B	0EE0	and     a, E0H
015C	4081	mov     rb, a
015D	3692	clr     PA5
015E	4701	mov     a, rb
015F	0592	orm     a, PA
				;212	    _SPI_SCL(0);
0160	5F17	clr     bLevel
0161	5F18	clr     del
0162	20DA	call    __SPI_SCL
				;213	  }
				;214	 
				;215	  for(i=7; i >= 0; i--)
0186	559C	dec     data
0187	579B	sdz     ReadData
0188	296A	jmp     L016A
				;216	  {
				;217	    // F-Edge
				;218	    _SPI_SCL(1);
				L016A:
016A	0F01	mov     a, 1H
016B	4097	mov     bLevel, a
016C	5F18	clr     del
016D	20DA	call    __SPI_SCL
				;219	    SDO = 0x1 & ((WriteData) >> i);
016E	4719	mov     a, WriteData[0]
016F	4081	mov     rb, a
0170	5F02	clr     rc
0171	541C	inca    data
0172	2978	jmp     L0178
				L0173:
0173	340A	clr     C
0174	7F82	sz      rc.7
0175	300A	set     C
0176	5B82	rrc     rc
0177	5B81	rrc     rb
				L0178:
0178	1785	sdz     ACC
0179	2973	jmp     L0173
017A	0F01	mov     a, 1H
017B	4681	andm    a, rb
017C	5101	swapa   rb
017D	1885	rl      ACC
017E	0EE0	and     a, E0H
017F	4081	mov     rb, a
0180	3692	clr     PA5
0181	4701	mov     a, rb
0182	0592	orm     a, PA
				;220	    _SPI_SCL(0);
0183	5F17	clr     bLevel
0184	5F18	clr     del
0185	20DA	call    __SPI_SCL
				;221	  }
				;222	 
				;223	  _SPI_CS(1);
0189	0F01	mov     a, 1H
018A	4097	mov     bLevel, a
018B	5F18	clr     del
018C	20E4	call    __SPI_CS
018D	0003	ret
018E	0000	nop
018F	0000	nop
0190	0000	nop
0191	0000	nop
				L0192:
0192	0000	nop
				L0193:
0193	0000	nop
0194	1785	sdz     ACC
0195	2993	jmp     L0193
				L0196:
0196	0000	nop
0197	1785	sdz     ACC
0198	2996	jmp     L0196
0199	5797	sdz     bLevel
019A	2996	jmp     L0196
019B	0003	ret
				;224	}
				;225	
				;226	//---				;227	void LCD_Cmd(unsigned char data)
				;228	{
				_LCD_Cmd:
				_LCD_Cmd:
03AA	4080	mov     ra, a
03AB	4099	mov     data[0], a
				;229	    DATA_BUS = data;  //03AC	4700	mov     a, ra
03AD	00AA	mov     PG, a
				;230	    RS=0; RW=0; EN=1; //03AE	342E	clr     PH0
03AF	34AE	clr     PH1
03B0	312E	set     PH2
				;231	    delay_ms(1);
03B1	0F01	mov     a, 1H
03B2	219C	call    _delay_ms
				;232	    EN=0;           //03B3	352E	clr     PH2
03B4	0003	ret
				;233	}
				;234	//---				;235	void LCD_Senddata(unsigned char data)
				;236	{
				_LCD_Senddata:
				_LCD_Senddata:
034F	4080	mov     ra, a
0350	4099	mov     data[0], a
				;237	    DATA_BUS = data;  //0351	4700	mov     a, ra
0352	00AA	mov     PG, a
				;238	    RS=1; RW=0; EN=1; //0353	302E	set     PH0
0354	34AE	clr     PH1
0355	312E	set     PH2
				;239	    delay_ms(1);
0356	0F01	mov     a, 1H
0357	219C	call    _delay_ms
				;240	    EN=0;           //0358	352E	clr     PH2
0359	0003	ret
				L035A:
035A	5F19	clr     data[0]
035B	0F08	mov     a, 8H
035C	409B	mov     ReadData, a
				L035D:
035D	340A	clr     C
035E	5A97	rlc     bLevel
035F	5A99	rlc     data[0]
0360	4719	mov     a, data[0]
0361	4218	sub     a, del
0362	380A	snz     C
0363	2B68	jmp     L0368
0364	4719	mov     a, data[0]
0365	4218	sub     a, del
0366	4099	mov     data[0], a
0367	5497	inc     bLevel
				L0368:
0368	579B	sdz     ReadData
0369	2B5D	jmp     L035D
036A	7C1A	sz      Address.0
036B	4199	cpl     data[0]
036C	7C1A	sz      Address.0
036D	5499	inc     data[0]
036E	7C9A	sz      Address.1
036F	4197	cpl     bLevel
0370	7C9A	sz      Address.1
0371	5497	inc     bLevel
0372	0003	ret
				;241	}
				;242	//---LCD				;243	void LCD_Reset(void)
				;244	{
				;245	    LCD_Cmd(0b00111000);//8bit				_LCD_Reset:
				_LCD_Reset:
03B5	0F38	mov     a, 38H
03B6	23AA	call    _LCD_Cmd
				;246	                        //bit4:DL=1,8bit				;247	                        //bit3:N=1,				;248	                        //bit2:F=0,5*7				;249	    LCD_Cmd(0b00001100);//03B7	0F0C	mov     a, CH
03B8	23AA	call    _LCD_Cmd
				;250	                        //bit2:D=1,				;251	                        //bit1:C=0,				;252	    LCD_Cmd(0b00000110);//03B9	0F06	mov     a, 6H
03BA	23AA	call    _LCD_Cmd
				;253	                        //bit1:I/D=1,				;254	                        //bit0:S=0,				;255	    LCD_Cmd(0b00000001); //03BB	0F01	mov     a, 1H
03BC	23AA	call    _LCD_Cmd
				;256	    LCD_Cmd(0b00000010); //03BD	0F02	mov     a, 2H
03BE	23AA	call    _LCD_Cmd
03BF	0003	ret
				;257	}
				;258	
				;259	//////////////////////////////
				;260	///Delay				;261	//////////////////////////////
				;262	void delay_ms(unsigned char del)
				;263	{	
				_delay_ms:
				_delay_ms:
019C	4098	mov     del[0], a
				;264		unsigned char i;
				;265		for(i=0;i<del;i++) GCC_DELAY(2000);		//019D	5F00	clr     ra
019E	29A8	jmp     L01A8
				L019F:
019F	0F01	mov     a, 1H
01A0	4097	mov     bLevel, a
01A1	0FF1	mov     a, F1H
01A2	340B	clr     BP0
01A3	348B	clr     BP1
01A4	2192	call    L0192
01A5	348B	clr     BP1
01A6	340B	clr     BP0
01A7	5480	inc     ra
				L01A8:
01A8	4700	mov     a, ra
01A9	4218	sub     a, del[0]
01AA	390A	snz     Z
01AB	299F	jmp     L019F
01AC	0003	ret
				;266	}
				;file C:\Users\IIIT\Desktop\ADXL345\try1\ADXL345_SPI\startup1_l.asm
				;1	;;--------------------------------------------------------------;;
				;2	;;    This file is part of the Holtek C Compiler V3 package     ;;
				;3	;;    For the initialization of static linkage variables        ;;
				;4	;;    Copyright (C) 2017 Holtek Semiconductor Inc.              ;;
				;5	;;    Version: 1.07 (Above IDE3000 V7.94)                       ;;
				;6	;;    Date:    2017/03/06                                        ;;
				;7	;;--------------------------------------------------------------;;
				;8	
				;9	acc equ [05h]
				;10	tblp equ [07h]
				;11	tblh equ [08h]
				;12	;;tbhp equ [09h] 
				;13	r0 equ [00h]
				;14	mp0 equ [01h]
				;15	r1 equ [02h]
				;16	mp1l equ [03h]
				;17	mp1h equ [04h]
				;18	z equ [0ah].2
				;19	c equ [0ah].0
				;20	
				;21	ifndef tbhp
				;22	tbhp equ [09h]
				;23	endif
				;24	 
				;25	extern startup_value_1:near
				;26	
				;27	@start .section 'code'
				;28	begin_startup_value:
				;29	  mov a,low (offset startup_value_1) 
				begin_startup_value:
				@start .SECTION 'CODE'
				_main_startup1:
				@start .SECTION 'CODE'
0002	0FD3	mov     a, D3H
				;30	  mov tblp,a
0003	0087	mov     TBLP, a
				;31	  mov a,high (offset startup_value_1) 
0004	0F03	mov     a, 3H
				;32	  mov tbhp,a
0005	0089	mov     TBHP, a
				;33	next_table:
				;34	  ;CLR WDT
				;35	  inc tblp
				next_table:
0006	1487	inc     TBLP
				;36	  sz z
0007	3D0A	sz      Z
				;37	  inc tbhp
0008	1489	inc     TBHP
				;38	ifdef USE_TABRDC
				;39	  tabrdc mp0
				;40	else
				;41	  tabrd mp0
0009	1D01	tabrd   MP0
				;42	endif
				;43	  sz mp0
000A	1081	sz      MP0
				;44	  jmp read_data
000B	280D	jmp     read_data
				;45	  jmp startupend1
000C	2822	jmp     startupend1
				;46	read_data:
				;47	  inc tblp
				read_data:
000D	1487	inc     TBLP
				;48	  sz z
000E	3D0A	sz      Z
				;49	  inc tbhp
000F	1489	inc     TBHP
				;50	ifdef USE_TABRDC
				;51	  tabrdc mp1l
				;52	else
				;53	  tabrd mp1l
0010	1D03	tabrd   MP1L
				;54	endif
				;55	  mov a,tblh
0011	0708	mov     a, TBLH
				;56	  mov mp1h,a
0012	0084	mov     MP1H, a
				;57	next_data:
				;58	  inc tblp
				next_data:
0013	1487	inc     TBLP
				;59	  sz z
0014	3D0A	sz      Z
				;60	  inc tbhp
0015	1489	inc     TBHP
				;61	ifdef USE_TABRDC
				;62	  tabrdc acc
				;63	else
				;64	  tabrd acc
0016	1D05	tabrd   ACC
				;65	endif
				;66	  mov r1,a
0017	0082	mov     [02H], a
				;67	  sdz mp0
0018	1781	sdz     MP0
				;68	  jmp $+2
0019	281B	jmp     L001B
				;69	  jmp next_table
001A	2806	jmp     next_table
				;70	  inc mp1l
				L001B:
001B	1483	inc     MP1L
				;71	  mov a,tblh
001C	0708	mov     a, TBLH
				;72	  mov r1,a
001D	0082	mov     [02H], a
				;73	  inc mp1l
001E	1483	inc     MP1L
				;74	  sdz mp0
001F	1781	sdz     MP0
				;75	  jmp next_data
0020	2813	jmp     next_data
				;76	  jmp next_table
0021	2806	jmp     next_table
				;77	
				;78	;end_startup_value:
				;79	
				;80	startupend1:
				;81	ifndef Disable_Bit_Initial
				;82		MOV A,high  bitdatasec1_start
				startupend1:
0022	0F00	mov     a, 0H
				;83		MOV mp1h,a
0023	0084	mov     MP1H, a
				;84		MOV A,offset bitdatasec1_end
0024	0F80	mov     a, 80H
				;85		mov mp1l,A
0025	0083	mov     MP1L, a
				;86		dec mp1l
0026	1583	dec     MP1L
				;87		clr z
0027	350A	clr     Z
				;88		sub a,offset bitdatasec1_start
0028	0A80	sub     a, 80H
				;89		sz z
0029	3D0A	sz      Z
				;90		jmp startupend2
002A	282F	jmp     startupend2
				;91	L0005:
				;92		set r1
				L0005:
002B	1F82	set     [02H]
				;93		dec mp1l
002C	1583	dec     MP1L
				;94		sdz  acc
002D	1785	sdz     ACC
				;95		jmp L0005
002E	282B	jmp     L0005
				;96	
				;97	startupend2:
				;98		MOV A,high  bitdatasec0_start
				startupend2:
002F	0F00	mov     a, 0H
				;99		MOV mp1h,a
0030	0084	mov     MP1H, a
				;100		MOV A,offset bitdatasec0_end
0031	0F80	mov     a, 80H
				;101		mov mp1l,A
0032	0083	mov     MP1L, a
				;102		dec mp1l
0033	1583	dec     MP1L
				;103		clr z
0034	350A	clr     Z
				;104		sub a,offset bitdatasec0_start
0035	0A80	sub     a, 80H
				;105		sz  z
0036	3D0A	sz      Z
				;106		jmp startupend3
0037	283C	jmp     startupend3
				;107	L0006:
				;108		clr r1
				L0006:
0038	1F02	clr     [02H]
				;109		dec mp1l
0039	1583	dec     MP1L
				;110		sdz  acc
003A	1785	sdz     ACC
				;111		jmp L0006
003B	2838	jmp     L0006
				;112	startupend3:
				;113	endif		
				;114	   
				;115	@ROMDATA_BASE .SECTION com_l 'CODE'  
				;116	startup_value:
				;117	;;linker range the initial value table here
				;118	
				;119	@BITDATASEC1 .SECTION com_l 'DATA'  
				;120	bitdatasec1_start:
				;121	
				;122	@BITDATASEC1 .SECTION com_e 'DATA'  
				;123	bitdatasec1_end:
				;124	
				;125	@BITDATASEC .SECTION com_l 'DATA'  
				;126	bitdatasec0_start:
				;127	
				;128	@BITDATASEC .SECTION com_e 'DATA'  
				;129	bitdatasec0_end:
				data .SECTION 'DATA'
				__papu DB DUP (?) ; __papu
				__pa DB DUP (?) ; __pa
				__pac DB DUP (?) ; __pac
				__pbpu DB DUP (?) ; __pbpu
				__pb DB DUP (?) ; __pb
				__pbc DB DUP (?) ; __pbc
				__pg DB DUP (?) ; __pg
				__pgc DB DUP (?) ; __pgc
				__ph DB DUP (?) ; __ph
				__phc DB DUP (?) ; __phc
				__smod DB DUP (?) ; __smod
				__wdtc DB DUP (?) ; __wdtc
				__cp0c DB DUP (?) ; __cp0c
				__cp1c DB DUP (?) ; __cp1c
				__simc0 DB DUP (?) ; __simc0
				__simc2 DB DUP (?) ; __simc2
				__scomc DB DUP (?) ; __scomc
				ra DB DUP (?)
				rb DB DUP (?)
				rc DB DUP (?)
				rd DB DUP (?)
				re DB DUP (?)
				rf DB DUP (?)
				rg DB DUP (?)
				bLevel DB 2 DUP (?) ; bLevel
				del DB DUP (?) ; del
				data DB DUP (?) ; data
				Address DB DUP (?) ; Address
				ReadData DB DUP (?) ; ReadData
				data DB DUP (?) ; data
				_main_2 DB DUP (?)
				DATAX0 DB DUP (?) ; DATAX0
				DATAZ1 DB DUP (?) ; DATAZ1
				DATAY1 DB DUP (?) ; DATAY1
				DATAX1 DB DUP (?) ; DATAX1
				DATAZ0 DB DUP (?) ; DATAZ0
				DATAY0 DB DUP (?) ; DATAY0
				i DB DUP (?) ; i
				deviceID DB 2 DUP (?) ; deviceID
				z DB DUP (?) ; z
				y DB DUP (?) ; y
				__ifs4 DB DUP (?) ; __ifs4
				x DB DUP (?) ; x
